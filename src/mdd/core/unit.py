from .serializer import SerializerInterface
import uuid
from .metadata import Metadata


class UnitInterface(SerializerInterface):
    def getid(self) -> str:
        pass

    def identifier(self) -> []:
        pass

    def getmetadata(self) -> Metadata:
        pass

    def find(self, id: [], complete=True):
        """
        Returns the first element if it can find the element based on the identifier.
        If the identifier is complete (i.e. generated by the identifier()) the algorithm will be use a
        """
        pass

    def findAll(self, id: [], complete=True) -> []:
        """
        Returns the elements if it can find the element based on the identifier.

        """
        pass

    def getchilds(self) -> []:
        pass

    def getparent(self):
        pass

    def getparents(self) -> []:
        pass

    def update(self) -> bool:
        pass


class Unit(UnitInterface):
    def __init__(self, id: str, parent=None, metadata=Metadata()):
        self.id = id
        self.metadata = metadata
        self.parent = parent

    def getid(self) -> str:
        return self.id

    def identifier(self) -> []:
        if self.parent:
            identifiers = self.parent.identifier()
            identifiers += [self.getid()]
        return []

    def getmetadata(self) -> Metadata:
        return self.metadata

    def find(self, id: [], complete=True):
        if complete:
            length = len(id)

            def _find(elem: UnitInterface, index: int):
                if index:
                    if index < length:
                        if not id[index] == elem.getid():
                            return None
                else:
                    index = id.index(elem.getid())
                if not index:
                    return None
                if index == length - 1:
                    return elem
                if index < length - 1:
                    pos = index + 1
                    for child in elem.getchilds():
                        res = _find(child, pos)
                        if res:
                            return child
                return None

            return _find(self, -1)
        else:
            raise NotImplementedError

    def findAll(self, id: [], complete=True) -> []:
        result = []
        if complete:
            length = len(id)

            def _find(elem: UnitInterface, index: int):
                if index:
                    if index < length:
                        if not id[index] == elem.getid():
                            return None
                else:
                    index = id.index(elem.getid())
                if not index:
                    return None
                if index == length - 1:
                    result.append(elem)
                    return elem
                if index < length - 1:
                    pos = index + 1
                    for child in elem.getchilds():
                        _find(child, pos)
                return None

            _find(self, -1)
        else:
            raise NotImplementedError
        return result

    def getchilds(self) -> []:
        return []

    def getparent(self):
        return self.parent

    def getparents(self) -> []:
        if self.parent:
            parents = self.parent.getparents()
            parents += [self.parent]
            return parents
        return []

    def update(self) -> bool:
        changed = False
        for child in self.getchilds():
            res = child.update()
            if res:
                changed = True
        return changed

    def fromDict(self, json: dict) -> bool:
        if "id" in json.keys():
            self.id = json["id"]

        if "metadata" in json.keys():
            if not self.metadata:
                self.metadata = Metadata()
            self.metadata.fromDict(json["metadata"])
        return True

    def toDict(self) -> dict:
        res = dict(id=self.id)

        if self.metadata:
            res.update({"metadata": self.metadata.toDict()})

        return res


class UniqueUnit(Unit):
    def __init__(self):
        super().__init__(str(uuid.uuid4()))
